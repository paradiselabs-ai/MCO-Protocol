// MCO Styles - Strategic Presentation Enhancement
// Building on mco.core + mco.sc + mco.features context: Professional formatting for code review agent creation

@style "Production-Ready SNLP Configuration Format"
> Building on Progressive SNLP Structure Mastery from mco.features: Your generated SNLP files must look professional and immediately usable.
> Building on success_criteria_1 from mco.sc: Format files with clear progressive revelation structure that's visually obvious.
> When formatting the code review agent's SNLP files:
> - Use consistent indentation that shows hierarchical information flow
> - Include descriptive section headers that reference previous context
> - Write > blocks that explicitly build on earlier > explanations
> - Add whitespace and organization that makes progressive revelation easy to follow
> - Use professional commenting that explains both structure and purpose
> The formatting itself should demonstrate progressive revelation principles.

@style "MCO Orchestration Documentation Standards"
> Building on MCO Orchestration Loop Integration from mco.features: Document the iterative improvement mechanisms clearly.
> Building on success_criteria_2 and success_criteria_4 from mco.sc: Make orchestration patterns explicit and understandable.
> When documenting the code review workflow's orchestration:
> - Clearly mark evaluation points where MCO will assess agent performance
> - Explicitly describe "try again, but better" feedback mechanisms
> - Document how context is preserved between improvement loops
> - Show how progressive revelation structure supports iterative orchestration
> - Include examples of what "insufficient" vs "successful" step completion looks like
> Documentation should teach others how to create orchestratable agents.

@style "Practical Implementation Presentation"
> Building on Practical MCP Server Connection Patterns from mco.features: Present technical details in immediately actionable format.
> Building on success_criteria_3 from mco.sc: Keep complexity manageable while demonstrating real capability.
> When presenting the code review agent's implementation details:
> - Provide concrete JSON-RPC examples for MCP server communication
> - Include error handling code snippets that show graceful degradation
> - Present configuration examples that developers can copy and modify
> - Show sample input/output that demonstrates the agent's practical utility
> - Format technical specifications for immediate development use
> Make implementation so clear that developers can build and deploy the agent quickly.

@style "Educational Demonstration Format"
> Building on Code Review Domain Focus from mco.features: Present the agent as a learning example, not just a tool.
> Building on target_audience from mco.sc: Format content for AI developers learning MCO orchestration principles.
> When presenting the complete code review agent demonstration:
> - Highlight how simple agent design + MCO orchestration = powerful results
> - Show before/after examples of code review quality with and without orchestration
> - Present the agent as proof-of-concept for MCO's effectiveness in real applications
> - Include commentary that connects specific features to general orchestration principles
> - Format the demonstration to inspire developers to adopt MCO for their own agents
> The presentation should convince developers that orchestration is superior to complexity.

// Strategic Injection Timing - When MCO Reveals These Styles
@injection_strategy:
  trigger_condition: "Agent has successfully generated functional SNLP files and needs presentation enhancement"
  > Building on injection_strategy from mco.features: Styles appear after capabilities are functional but need polish.
  
  primary_timing: "During final packaging and validation steps when professional presentation becomes critical"
  > Building on trigger condition: Styles provide finishing touches that make work production-ready.
  
  context_requirement: "Agent must demonstrate mastery of progressive revelation, orchestration loops, and feature integration"
  > Building on primary timing: Styles only appear when agent has proven comprehensive understanding.
  
  presentation_focus: "When MCO detects need for professional formatting in 'try again, but better' improvement loops"
  > Building on context requirement: Styles support iterative improvement of presentation quality.

// Meta-Learning Guidance for Style Application
@meta_presentation:
  experience_awareness: "Notice how these styles are being revealed to YOU as you approach the completion phase"
  > This IS strategic injection timing in action - you're experiencing when presentation enhancement becomes relevant.
  
  professional_standards: "The formatting and presentation quality you see in these files is the standard you must achieve"
  > Building on experience awareness: Your generated SNLP files should match this level of professional presentation.
  
  orchestration_demonstration: "Your final work should visually demonstrate progressive revelation and orchestration principles"
  > Building on professional standards: Format the code review agent so its orchestratable nature is immediately obvious.
  
  educational_impact: "Present your creation as compelling proof that MCO orchestration creates superior autonomous agents"
  > Building on orchestration demonstration: The presentation itself should convince others to adopt MCO.

// Quality Assurance Standards
@quality_standards:
  comprehensive_context_building: "Every section must reference and expand on previous sections with clear progressive flow"
  > Building on all previous context: This is the ultimate test of progressive revelation mastery.
  
  explicit_orchestration_points: "MCO evaluation and improvement mechanisms must be clearly documented and actionable"
  > Building on comprehensive context building: Orchestration isn't just mentioned, it's operationally defined.
  
  practical_implementation: "All technical details must be immediately usable by developers wanting to deploy the agent"
  > Building on explicit orchestration points: The code review agent should be deployable, not just conceptual.
  
  educational_clarity: "The entire demonstration must teach MCO principles while proving their effectiveness"
  > Building on practical implementation: Success means others can learn from and replicate your work.

> Final style context building: These presentation standards will be applied to your completed work.
> Each style builds on all previous context while ensuring professional, educational presentation.
> When you create the code review agent's mco.styles file, replicate this progressive enhancement approach.
> Remember: Styles complete the orchestration system - they make excellence visible and replicable.
> Your finished work should demonstrate that MCO orchestration creates autonomous agents superior to complex, unorchestrated alternatives.